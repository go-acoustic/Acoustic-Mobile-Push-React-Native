{
  "Please note": "<true/false>, for native SDK build.  True for release build, false for beta build",
  "useRelease": false,
  "iOS Version": "<x.xx.xxx>, native iOS SDK version, empty defaults to latest",
  "iOSVersion": "",
  "Android Version": "<x.xx.xxx>, native Android SDK version, empty defaults to latest",
  "androidVersion": "",
  "plugins": {
    "Required Mobile-Push plugins": "<true/false>, enable or disable plugin",
    "react-native-acoustic-mobile-push-beta": true,
    "react-native-acoustic-mobile-push-ios-notification-service-beta": true,
    "react-native-acoustic-mobile-push-inapp-beta": true,
    "react-native-acoustic-mobile-push-inbox-beta": true,
    "Optional Mobile-Push plugins": "<true/false>, enable or disable plugin",
    "react-native-acoustic-mobile-push-action-menu-beta": true,
    "react-native-acoustic-mobile-push-location-beta": true,
    "react-native-acoustic-mobile-push-beacon-beta": true,
    "react-native-acoustic-mobile-push-geofence-beta": true,
    "react-native-acoustic-mobile-push-calendar-beta": true,
    "react-native-acoustic-mobile-push-displayweb-beta": true,
    "react-native-acoustic-mobile-push-imagecarousel-beta": true,
    "react-native-acoustic-mobile-push-snooze-beta": true,
    "react-native-acoustic-mobile-push-textinput-beta": true,
    "react-native-acoustic-mobile-push-wallet-beta": true
  },
  "iOS": {
    "Please note: if you are using a Swift based Application Delegate you must include the product name and class name in AppDelegateClass, for example": "SwiftSample.AppDelegate",
    "appDelegateClass": "AppDelegate",
    "Please note": "you will need to update your baseUrl to the one supplied to you",
    "baseUrl": "https://mobile-sdk-lib-XX-Y.brilliantcollector.com",
    "appKey": {
      "dev": "INSERT YOUR DEV APPKEY HERE",
      "prod": "INSERT YOUR PROD APPKEY HERE"
    },
    "Please note, this option can be used to assign a device a different UserId on reinstallation, the default is to use the same UserId on reinstallation if possible (false). If you want a different UserId on reinstallation set invalidateExistingUser to-beta": true,
    "invalidateExistingUser": false,
    "This flag can be used to prevent the SDK from reinitializing after a GDPR request has been processed if set to": false,
    "autoReinitialize": true,
    "When the autoInitialize value is set to true it will start user registration immediately, if you want to trigger user registration later at a specific point in your app, set this value to": false,
    "autoInitialize": true,
    "The sessionTimeout value will set how long sessions last until a new one is reported on next app open in minutes": "",
    "sessionTimeout": 20,
    "Choose one of the following values for loglevel: ": [
      "none",
      "error",
      "info",
      "warn",
      "verbose"
    ],
    "loglevel": "error",
    "Set logfile to true to write logs to the iTunes sync directory for debugging": "",
    "logfile": true,
    "Maximum size of log before it's rotated": "default is 10MB",
    "maximumLogSize": 10000000,
    "Maximum number of rotated log files": "default is to keep 7 in unix style rotation",
    "maximumNumberOfLogFiles": 7,
    "This flag can be used to disable internal database encryption, this is typically only done for testing so the databases can be read in development. Default value is -beta": true,
    "databaseEncryption": true,
    "This setting can be used to change the frequency of key rotation for database encryption. The default value is ": 30,
    "databaseKeyRotationDays": 30,
    "This flag can be used to disallow jailbroken devices from being able to register. The default value is -beta": true,
    "allowJailbrokenDevices": true,
    "watch": {
      "category": "mce-watch-category",
      "handoff": {
        "Note the userActivityName must be also in the NSUserAcrtivityTypes array in the application's info.plist": "",
        "userActivityName": "com.mce.application",
        "This is the name of the interface controller in the Watch storyboard": "",
        "interfaceController": "handoff"
      }
    },
    "location": {
      "The location autoInitialize flag can be set to false to delay turning on the location services until desired.": "",
      "autoInitialize": true,
      "The sync key is only used to customize the iBeacon and Geofence syncing sevice, it is not required for those features": "",
      "sync": {
        "Location Sync radius is in meters, default 100km": "",
        "syncRadius": 100000,
        "Specify how long to wait before syncing again on significant location change in seconds, default 5 minutes": "",
        "syncInterval": 300
      },
      "Please note, the existince of the location key will enable geofence location support, if geofence support is not desired, remove the key": "",
      "geofence": {
        "choose one of the following values for accuracy: ": [
          "best",
          "10m",
          "100m",
          "1km",
          "3km"
        ],
        "accuracy": "3km"
      },
      "Please note, the existince of the ibeacon key will enable iBeacon support, if iBeacon support is not desired, remove the key": "",
      "ibeacon": {
        "UUID": "SET YOUR IBEACON UUID HERE"
      }
    }
  },
  "android": {
    "Please note": "you will need to update your baseUrl to the one supplied to you",
    "baseUrl": "https://mobile-sdk-lib-XX-Y.brilliantcollector.com",
    "appKey": {
      "prod": "INSERT APP KEY HERE"
    },
    "Set this to the google project number if you are using GCM or to an empty string if you are using FCM": "",
    "Use 'gcm' for GCM or 'fcm' for FCM": "",
    "messagingService": "fcm",
    "Will invalidate the existing user/channel ID if they exist when set to true": "This is for testing only. Do not ship with this set to true unless you understand what you are doing",
    "invalidateExistingUser": false,
    "Set this to false if you want MceApplication.init call to initiate the sdk only if the sdk was initiated before. This should be used by those who want to control the timing the first sdk initiation and not to let it happen automatically on application onCreate. For sdk initiation for the first time, use MceApplication.firstInit": "true for automatic init, false for first init on firstInit call",
    "autoInitialize": true,
    "Will automatically reinitialize sdk after user deletion": "true for auto reinitialize, false for manual reinitialize",
    "autoReinitialize": true,
    "Setting sessionEnabled to true will trigger session start and session end events": "",
    "sessionsEnabled": true,
    "sessionTimeout is the number of minutes the SDK waits while the application is in the background before sending session end event": "",
    "sessionTimeout": 20,
    "metricTimeInterval defines the interval (in minutes) that SDK events sync with the server.": "",
    "metricTimeInterval": 3,
    "Set groupNotificationsByAttribution to true to bundle together notifications with the same attribution": "This will work on Android N and above",
    "groupNotificationsByAttribution": false,
    "Choose one of the following values for loglevel: ": [
      "none",
      "error",
      "warn",
      "info",
      "debug",
      "verbose"
    ],
    "loglevel": "error",
    "Please note, the log iteration files will be stored under": "<application cache folder on sdcard>/mce-react-native-sdk/logs/<installation time folder, format: yyyy-MM-dd-HH-mm-ss>",
    "logfile": false,
    "The number of log iteration files": "After reaching this number, the log files will be overwritten in order",
    "logIterations": 1,
    "The number of hours each log iteration will hold": "0 is for infinite time",
    "logIterationDurationInHours": 0,
    "The number of log lines that will be stored in a RAM buffer before writing to the log file": "The higher this number is, more log lines will be lost in case of a crash.",
    "logBufferSize": 10,
    "Set useInMemoryImageCache to true to use RAM cache for inbox images": "",
    "useInMemoryImageCache": true,
    "Set useFileImageCache to true to use file based cache for inbox images": "Uses the sdcard application cache folder",
    "useFileImageCache": true,
    "The size of the inbox images RAM cache in MB": "",
    "inMemoryImageCacheCapacityInMB": 20,
    "The size of the inbox images file based cache in MB": "",
    "fileImageCacheCapacityInMB": 100,
    "Please note, the existince of the location key is not required, if it is not present though, iBeacon and Geofence support will be disabled.": "",
    "location": {
      "The location autoInitialize flag can be set to false to delay turning on the location services until desired.": "",
      "autoInitialize": true,
      "The sync key is only used to customize the iBeacon and Geofence syncing service, it is not required for those features": "",
      "sync": {
        "Specify how long to wait before syncing again on significant location change in seconds, default 5 minutes": "",
        "syncInterval": 300,
        "Location Sync radius is in meters, default 100km": "",
        "syncRadius": 100000,
        "Specify how long to wait before retrieving a new location from the device, default 5 minutes": "",
        "locationResponsiveness": 300,
        "Specify the minimum results when looking for locations nearby, default is 1, minimum value is 1": "",
        "minLocationsForSearch": 1,
        "Specify the maximum results when looking for locations nearby, default is 20, minimum value is 1": "",
        "maxLocationsForSearch": 20,
        "Specify the location providers that will be used to retrieve the device location. 'gps' - gps location. 'network' - wifi + cellular, default is gps + network": "",
        "providerPreferences": [
          "gps",
          "network"
        ]
      },
      "Please note, unlike iOS, the existence of the ibeacon key does not enable iBeacon support, iBeacon support is enabled only if iBeacons are nearby": "",
      "ibeacon": {
        "Please note: if this is not set, iBeacon events will not be sent": "This value should never be empty. Leave the default value if you don't want to use iBeacons",
        "uuid": "YOUR-IBEACONS-UUID",
        "Specify how much time the sdk will scan for iBeacons in every scan session while the application is in the foreground, default is 5 seconds": "",
        "beaconForegroundScanDuration": 5,
        "Specify how much time the sdk will wait between iBeacons scan sessions while the application is in the foreground, default is 30 seconds": "",
        "beaconForegroundScanInterval": 30,
        "Specify how much time the sdk will scan for iBeacons in every scan session while the application is in the background, default is 30 seconds": "",
        "beaconBackgroundScanDuration": 30,
        "Specify how much time the sdk will wait between iBeacons scan sessions while the application is in the background, default is 5 minutes": "",
        "beaconBackgroundScanInterval": 300
      }
    }
  }
}